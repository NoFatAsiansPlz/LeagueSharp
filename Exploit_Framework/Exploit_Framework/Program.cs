using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Reflection;
using LeagueSharp;
using LeagueSharp.Common;
using SharpDX;

namespace Exploit_Framework
{
    class Program
    {
        public static Menu Config;
        public static Items.Item TrinketN = new Items.Item(3340, 600f);
        private static Spell _Q = new Spell(SpellSlot.Q, 99999, TargetSelector.DamageType.Physical);
        private static Spell _W = new Spell(SpellSlot.W, 99999, TargetSelector.DamageType.Physical);
        private static Spell _E = new Spell(SpellSlot.E, 99999, TargetSelector.DamageType.Physical);
        static void Main(string[] args)
        {
            CustomEvents.Game.OnGameLoad += OnGameLoad;
        }


        private static void OnGameLoad(EventArgs args)
        {
            Config = new Menu("Riot Pls", "Exploit", true);
            Config.AddSubMenu(new Menu("Exploits", "Exploits"));
            Config.SubMenu("Exploits").AddItem(new MenuItem("LAG", "Q")).SetValue(new KeyBind("H".ToCharArray()[0], KeyBindType.Toggle));
            Config.SubMenu("Exploits").AddItem(new MenuItem("LAG2", "W")).SetValue(new KeyBind("J".ToCharArray()[0], KeyBindType.Toggle));
            Config.SubMenu("Exploits").AddItem(new MenuItem("LAG3", "E")).SetValue(new KeyBind("K".ToCharArray()[0], KeyBindType.Toggle));
            Config.SubMenu("Exploits").AddItem(new MenuItem("ModoXward", "Trinket to Blue").SetValue(new KeyBind('Z', KeyBindType.Press)));
            Config.SubMenu("Exploits").AddItem(new MenuItem("ModoXward2", "Trinket to Red").SetValue(new KeyBind('Z', KeyBindType.Press)));
            Config.SubMenu("Exploits").AddItem(new MenuItem("ModoXward3", "On The Spot").SetValue(new KeyBind('Z', KeyBindType.Press)));
            Config.AddToMainMenu();
            Game.PrintChat("Trololol");
            Game.OnGameUpdate += game_Update;
        }

        private static void game_Update(EventArgs args)
        {
            if (Config.Item("LAG").GetValue<KeyBind>().Active)
            {
                foreach (Obj_AI_Base minion in ObjectManager.Get<Obj_AI_Base>().Where(minion => minion.IsEnemy))
                {
                    if (minion.ServerPosition.Distance(ObjectManager.Player.ServerPosition) > 1000)
                    {
                        _Q.CastOnUnit(minion);
                    }
                }
            }

            if (Config.Item("LAG2").GetValue<KeyBind>().Active)
            {
                foreach (Obj_AI_Base minion in ObjectManager.Get<Obj_AI_Base>().Where(minion => minion.IsEnemy))
                {
                    if (minion.ServerPosition.Distance(ObjectManager.Player.ServerPosition) > 1000)
                    {
                        _W.CastOnUnit(minion);
                    }
                }
            }

            if (Config.Item("LAG3").GetValue<KeyBind>().Active)
            {
                foreach (Obj_AI_Base minion in ObjectManager.Get<Obj_AI_Base>().Where(minion => minion.IsEnemy))
                {
                    if (minion.ServerPosition.Distance(ObjectManager.Player.ServerPosition) > 1000)
                    {
                        _E.CastOnUnit(minion);
                    }
                }
            }
            if (Config.Item("ModoXward").GetValue<KeyBind>().Active)
            {
                if (TrinketN.IsReady())
                {
                    TrinketN.Cast(new Vector3(100, 100, -71f));
                    TrinketN.Cast(new Vector3(200, 200, 53f));
                    TrinketN.Cast(new Vector3(300, 300, 50f));
                    TrinketN.Cast(new Vector3(400, 400, 50f));
                    TrinketN.Cast(new Vector3(500, 500, 51f));
                    TrinketN.Cast(new Vector3(600, 600, 51f));
                    TrinketN.Cast(new Vector3(700, 700, 49f));
                    TrinketN.Cast(new Vector3(800, 800, 53f));
                    TrinketN.Cast(new Vector3(900, 900, 53f));
                    TrinketN.Cast(new Vector3(1000, 1000, 57f));
                    TrinketN.Cast(new Vector3(1100, 1100, 51f));
                    TrinketN.Cast(new Vector3(1200, 1200, -68f));
                    TrinketN.Cast(new Vector3(1300, 1300, -7f));
                    return;
                }
            }
            if (Config.Item("ModoXward2").GetValue<KeyBind>().Active)
            {
                if (TrinketN.IsReady())
                {
                    TrinketN.Cast(new Vector3(15000, 15000, -71f));
                    TrinketN.Cast(new Vector3(14900, 14900, 53f));
                    TrinketN.Cast(new Vector3(14800, 14800, 50f));
                    TrinketN.Cast(new Vector3(14700, 14700, 50f));
                    TrinketN.Cast(new Vector3(14600, 14600, 51f));
                    TrinketN.Cast(new Vector3(14500, 14500, 51f));
                    TrinketN.Cast(new Vector3(14400, 14400, 49f));
                    TrinketN.Cast(new Vector3(14300, 14300, 53f));
                    TrinketN.Cast(new Vector3(14200, 14200, 53f));
                    TrinketN.Cast(new Vector3(14100, 14100, 57f));
                    TrinketN.Cast(new Vector3(14000, 14000, 51f));
                    TrinketN.Cast(new Vector3(13900, 13900, -68f));
                    TrinketN.Cast(new Vector3(13800, 13800, -7f));
                    return;
                }
            }
            if (Config.Item("ModoXward3").GetValue<KeyBind>().Active)
            {
                if (TrinketN.IsReady())
                {
                    TrinketN.Cast(new Vector3(15000, 15000, -71f));
                    TrinketN.Cast(new Vector3(15100, 15100, -71f));
                    TrinketN.Cast(new Vector3(0, 0, 53f));
                    TrinketN.Cast(new Vector3(100, 100, 53f));
                    TrinketN.Cast(new Vector3(0, 15000, 50f));
                    TrinketN.Cast(new Vector3(0, 15100, 50f));
                    TrinketN.Cast(new Vector3(15000, 0, 50f));
                    TrinketN.Cast(new Vector3(15100, 0, 50f));
                    TrinketN.Cast(new Vector3(15100, 100, 50f));
                    TrinketN.Cast(new Vector3(100, 15100, 50f));
                    return;
                }
            }
        }
    }
}
